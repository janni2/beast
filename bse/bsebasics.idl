// Licensed GNU LGPL v2.1 or later: http://www.gnu.org/licenses/lgpl.html
namespace Bse {
using namespace Sfi;
/* param options */
Const READWRITE       = ":r:w:";
Const STORAGE         = ":r:w:S:";
Const STANDARD        = ":r:w:S:G:";
Const STANDARD_RDONLY = ":r:w:S:G:ro:";
Const GUI             = ":r:w:G:";
Const GUI_RDONLY      = ":r:w:G:ro:";
Const GUI_READABLE    = ":r:G:";
/* extra options */
Const SKIP_DEFAULT    = ":skip-default:";
Const SKIP_UNDO       = ":skip-undo:";
Const DEFAULT = STANDARD; // FIXME: remove
/* numeric constants */
Const MAXINT = +2147483647;
Const MININT = -2147483648;
Const MAXNUM = +9223372036854775807;
Const MINNUM = -9223372036854775808;
Const MINDB = -96; /* 32bit:-192 24bit:-144 16bit:-96 */
/* standard sequences */
sequence TypeSeq {
  SfiString types;
};
sequence Flo4tSeq {
  Real values;
};
enum MidiChannelEventType {
  MIDI_EVENT_NONE = 0,
  /* channel voice messages */
  MIDI_EVENT_NOTE_OFF,
  MIDI_EVENT_NOTE_ON,
  MIDI_EVENT_KEY_PRESSURE,
  MIDI_EVENT_CONTROL_CHANGE,
  MIDI_EVENT_PROGRAM_CHANGE,
  MIDI_EVENT_CHANNEL_PRESSURE,
  MIDI_EVENT_PITCH_BEND,
  /* system common messages */
  MIDI_EVENT_SYS_EX,
  MIDI_EVENT_SONG_POINTER,
  MIDI_EVENT_SONG_SELECT,
  MIDI_EVENT_TUNE,
  /* system realtime messages */
  MIDI_EVENT_TIMING_CLOCK,
  MIDI_EVENT_SONG_START,
  MIDI_EVENT_SONG_CONTINUE,
  MIDI_EVENT_SONG_STOP,
  MIDI_EVENT_ACTIVE_SENSING,
  MIDI_EVENT_SYSTEM_RESET,
};
record MidiChannelEvent
{
  MidiChannelEventType  event_type;
  Int                   channel         = SfiInt ("Channel", "", 0, 0, 99, 1, ":readwrite"); // FIXME: MAX_MIDI_CHANNEL
  Num                   tick_stamp      = SfiNum ("Time Stamp", "", 0, 0, SFI_MAXNUM, 0, STANDARD);
  /* note (on/off/pressure) */
  Real                  frequency       = Freq ("Frequency", "", KAMMER_FREQ, ":readwrite");
  Real                  velocity        = SfiReal ("Velocity", "", 1, 0, 1.0, 0.1, ":readwrite");
  /* control change */
  Int                   control         = SfiInt ("Control Number", "", 0, 0, 1024, 8, ":readwrite");
  Real                  value           = SfiReal ("Value", "", 0, -1, +1, 0.1, ":readwrite");
  /* program change */
  Int                   program         = SfiInt ("Program", "", 0, 0, 0x7f, 0x10, ":readwrite");
  /* channel pressure */
  Real                  intensity       = SfiReal ("Intensity", "", 0, 0, 1.0, 0.1, ":readwrite");
  /* pitch bend */
  Real                  pitch_bend      = SfiReal ("Pitch Bend", "", 0, -1, +1, 0.1, ":readwrite");
  /* song pointer */
  Int                   song_pointer    = SfiInt ("Song Pointer", "", 0, 0, 0x3fff, 0x80, ":readwrite");
  /* song select */
  Int                   song_number     = SfiInt ("Song Number", "", 0, 0, 0x7f, 0x10, ":readwrite");
};
sequence NoteSeq {
  Int    notes   = Note ("Note", "", KAMMER_NOTE, ":readwrite"); /* FIXME: s/notes/note/ for pspecs, but not the C API */
};
interface Item;
sequence It3mSeq {
  Info   blurb = ("A list of BSE items or derived types.");
  Item   items;
};
record NoteSequence
{
  Int     offset = Note ("Note Offset", "Center/base note", KAMMER_NOTE, ":readwrite");
  NoteSeq notes  = SfiSeq ("Notes", "Sequence of notes", ":readwrite");
};

} // Bse
