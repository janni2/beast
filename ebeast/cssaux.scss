// This Source Code Form is licensed MPL-2.0: http://mozilla.org/MPL/2.0

/** HSV (HSB) to RGBA */
@function hsv($hue, $satb, $value, $a: 1) {
  @if $satb == 0 {
    @return hsla($hue, 0, $value, $a)
  } @else if $value == 0 {
    @return hsla($hue, 0, 0, $a)
  } @else {
    $lumi: $value * (1 - ($satb / 100) / 2);
    $satl: $satb * $value / if($lumi < 50, $lumi * 2, 200 - $lumi * 2);
    @return hsla($hue, $satl, $lumi, $a);
  }
}

/** Value of window.devicePixelRatio, assigned via JS to the CSS var `--device-pixel-ratio` */
$device-pixel-ratio: var(--device-pixel-ratio);

/** Convert CSS `px` to device pixels via the CSS var `--device-pixel-ratio` */
@function dppx($n: 1) {
  @return calc(1px * #{$n} / #{$device-pixel-ratio});
}

/// Clamp `$number` between `$min` and `$max`
@function clamp($number, $min, $max) {
  @return min(max($number, $min), $max);
}

// Raises `$base` to the power of `$exponent` which must be a positive integer
@function ipow($base, $exponent) {
  @if not unitless($base) {
    @error "Error: $base must be unitless:" $base;
  }
  @if $exponent < 1 {
    @return 1;
  }
  $val: $base;
  @while $exponent > 1 {
    $val: $val * $base;
    $exponent: $exponent - 1;
  }
  @return $val;
}
@if ipow(12345, 0) != 1 {
  @error "FAIL: ipow(12345, 0):" ipow(12345, 0);
}
@if ipow(2, 8) != 256 {
  @error "FAIL: ipow(2, 8) :" ipow(2, 8);
}

/// Convert a percentage number to a factor within 0â€¦1
@function asfactor($f) {
  @if (unit($f) == "%") {
    $f: $f / 100%;
  }
  @return $f;
}

/// Construct color from hue and relative luminance
/// [WCAG relative luminance](https://www.w3.org/TR/WCAG20/#relativeluminancedef)
@function color($h, $l: 50%, $s: 100%) {
  $base: chromatic-hsv($h, asfactor($s), 1);
  @return chromatic-color-luminance($base, asfactor($l));
}

/// Reduce luminance by a percentage
@function darker($col, $f: 10%) {
  // decrease luminance by a percentage, also work around luminance==0 -> 0
  $lum: max(0.0000001, chromatic-color-luminance($col) * (1 - asfactor($f)));
  @return chromatic-color-luminance($col, $lum, 'lab');
}

/// Increase luminance by a percentage
@function lighter($col, $f: 10%) {
  // increase luminance by a percentage, also work around luminance==0 -> 0
  $lum: max(0.0000001, chromatic-color-luminance($col) * (1 + asfactor($f)));
  @return chromatic-color-luminance($col, $lum, 'lab');
}

/// Black/grey/white by perceptible lightness (CIE L*)
// https://en.wikipedia.org/wiki/CIELAB_color_space
@function lgrey($l: 50%) {
  @return chromatic-color-set(#ffffff, 'lab.l', 100 * asfactor($l));
}

/// Adjust color `$col` to a specific perceptible lightness (CIE L*)
@function lcolor($col, $l: 100%) {
  @return chromatic-color-set($col, 'lab.l', 100 * asfactor($l));
}

/// Lighten `$color` until a target contrast ratio is met.
@function contrast-lighten($color, $targetratio: 1, $pivot: 'SAME') {
  @if (unit($targetratio) == "%") {
    $targetratio: $targetratio / 100% * 21;
  }
  @if $pivot == 'SAME' {
    $pivot: $color;
  }
  $targetratio: max(1, min(21, $targetratio));
  $lnext: chromatic-color-luminance($color);
  $new: $color;
  $currentratio: chromatic-contrast($pivot, $new);
  @while $currentratio < $targetratio and $lnext < 1 {
    $delta: max(0.000379, ($targetratio - $currentratio) / 21 / 2);
    $lnext: $lnext + $delta;
    $new: chromatic-color-luminance($color, max(0.0001, $lnext));
    $currentratio: chromatic-contrast($pivot, $new);
  }
  @return $new;
}
@if contrast-lighten(#000000, 1.006) != #010101 {
  @error "FAIL: contrast-lighten(#000000, 1.006):" contrast-lighten(#000000, 1.006);
}
@if contrast-lighten(#000000, 1.0075) != #020202 {
  @error "FAIL: contrast-lighten($start, 1.0075):" contrast-lighten($start, 1.0075);
}
@if contrast-lighten(#000000, 20.8) != #fefefe {
  @error "FAIL: contrast-lighten(#000000, 20.8):" contrast-lighten(#000000, 20.8);
}

/// Darken `$color` until a target contrast ratio is met.
@function contrast-darken($color, $targetratio: 1, $pivot: 'SAME') {
  @if (unit($targetratio) == "%") {
    $targetratio: $targetratio / 100% * 21;
  }
  @if $pivot == 'SAME' {
    $pivot: $color;
  }
  $targetratio: clamp($targetratio, 1, 21);
  $lnext: chromatic-color-luminance($color);
  $new: $color;
  $currentratio: chromatic-contrast($pivot, $new);
  @while $currentratio < $targetratio and $lnext > 0.00015 {
    $delta: clamp(($targetratio - $currentratio) / 21 / 2, 0.00045, $lnext * 0.7);
    $lnext: $lnext - $delta;
    $new: chromatic-color-luminance($color, max(0.0001, $lnext));
    $currentratio: chromatic-contrast($pivot, $new);
  }
  @return $new;
}
@if contrast-darken(#ffffff, 1.007) != #fefefe {
  @error "FAIL: contrast-darken(#ffffff, 1.007):" contrast-darken(#ffffff, 1.007);
}
@if contrast-darken(#ffffff, 20.8) != #010101 {
  @error "FAIL: contrast-darken(#ffffff, 20.8):" contrast-darken(#ffffff, 20.8);
  // $s:#fff; $t:contrast-darken($s, 20); @debug $s $t chromatic-contrast($t,$s);
}
